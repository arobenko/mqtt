if (NOT MQTT_CC_PLUGIN)
    return ()
endif ()
######################################################################

function (cc_plugin_mqtt)
    set (name "mqtt")
    
    set (meta_file "${CMAKE_CURRENT_SOURCE_DIR}/mqtt.json")
    set (stamp_file "${CMAKE_CURRENT_BINARY_DIR}/mqtt_refresh_stamp.txt")
    
    set (refresh_plugin_header TRUE)
    if ((NOT EXISTS ${stamp_file}) OR (${meta_file} IS_NEWER_THAN ${stamp_file}))
        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_CURRENT_SOURCE_DIR}/Plugin.h)
        execute_process(
            COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file})
    endif ()
    
    
    set (src
        Plugin.cpp
        Protocol.cpp
        TransportMessage.cpp
        message/Connect.cpp
        message/Connack.cpp
        message/Publish.cpp
        message/Puback.cpp
        message/Pubrec.cpp
        message/Pubrel.cpp
        message/Pubcomp.cpp
        message/Subscribe.cpp
        message/Suback.cpp
        message/Unsubscribe.cpp
        message/Unsuback.cpp
        message/Pingreq.cpp
        message/Pingresp.cpp
        message/Disconnect.cpp
        field/QoS.cpp
        field/PacketId.cpp
    )
    
    set (hdr
        Plugin.h
    )
    
    
    qt5_wrap_cpp(
        moc
        ${hdr}
    )
    
    add_library (${name} SHARED ${src} ${moc})
    target_link_libraries (${name} ${CC_PLUGIN_LIBRARIES})
    qt5_use_modules(${name} Core)
    
    install (
        TARGETS ${name}
        DESTINATION ${PLUGIN_INSTALL_DIR})

    if (MQTT_CC_PLUGIN_COPY_TO_CC_INSTALL_PATH)        
        install (
            TARGETS ${name}
            DESTINATION ${CC_PLUGIN_DIR})
     endif ()
    
endfunction()

######################################################################

if (NOT "${MQTT_QT_DIR}" STREQUAL "")
    list (APPEND CMAKE_PREFIX_PATH ${MQTT_QT_DIR})
endif ()

find_package(Qt5Core REQUIRED)

if (NOT "${MQTT_CC_INSTALL_PATH}" STREQUAL "")
    list (APPEND CMAKE_PREFIX_PATH "${MQTT_CC_INSTALL_PATH}/cmake")
endif ()

find_package(CommsChampion)

if (NOT CC_COMMS_CHAMPION_FOUND)
    message (FATAL_ERROR "CommsChampion wasn't found!. Please set MQTT_CC_INSTALL_PATH to its installation path.")
endif ()

include_directories("${CC_INCLUDE_DIRS}")
link_directories("${CC_PLUGIN_LIBRARY_DIRS}")

if (CMAKE_COMPILER_IS_GNUCC)
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftemplate-backtrace-limit=0")
endif ()

cc_plugin_mqtt ()
